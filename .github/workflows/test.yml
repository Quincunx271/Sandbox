name: CI

on:
  issue_comment:
    types: [ created ]

jobs:
  reformat:
    name: ClangFormat
    if: >-
      github.event.issue.pull_request != ''
      && github.event.comment.body == 'Do: ClangFormat'
      && github.event.comment.user.id == github.event.issue.user.id
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Checkout PR
        uses: dawidd6/action-checkout-pr@v1
        with:
          pr: ${{ github.event.issue.number }}
          
      - name: Get merge-base
        id: mergebase
        run: echo "::set-output name=commit::$(git merge-base master HEAD)"
    
      - name: Get branch name
        id: branchname
        run: echo "::set-output name=branch::$(git branch)"
    
      - name: Test
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      
      - name: Get clang-format
        run: sudo apt-get install clang-format-9
        
      - name: Clang format each commit in place
        run: |
          git config --local user.email "$(git log -n 1 --pretty=format:'%ae')"
          git config --local user.name 'GitHub Action'
          GIT_EDITOR="sed -iE 's/^pick/edit/g'" git rebase -i ${{ steps.mergebase.outputs.commit }}
          set -e
          echo '>>> Beginning Rebasing...'
          while [[ -n $(git status | grep rebase) ]]; do
            find . -name '*.hpp' -o -name '*.cpp' | xargs -L1 clang-format-9 -style=llvm -i --verbose
            echo '>>> Rewriting commit...'
            git add -A
            git commit --amend --no-edit
            echo '>>> Continuing Rebasing...'
            git rebase --continue
          done
          echo '>>> Finished Rebasing!'
        
      - name: Get PR Info
        id: prraw
        uses: octokit/request-action@v2.0.0
        with:
          route: GET /repos/:repository/pulls/${{ github.event.issue.number }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract PR Info
        id: pr
        run: |
          REPO_NAME=$(echo $DATA | jq '.head.repo.full_name')
          echo "::set-output name=repo::$REPO_NAME"
          BRANCH_NAME=$(echo $DATA | jq '.head.ref')
          echo "::set-output name=branch::$BRANCH_NAME"
        env:
          HEADERS: ${{ steps.prraw.outputs.headers }}
          DATA: ${{ steps.prraw.outputs.data }}
          
      - name: Push
        uses: ad-m/github-push-action@v0.5.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ steps.pr.outputs.repo }}
          force: true
          branch: ${{ steps.pr.outputs.branch }}
